// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
   provider = "mongodb"
  url      = env("DATABASE_URL")
}




//AUTHINTICATION MODAL

enum UserRole {
  ADMIN
  USER
}

model User {
  
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String? 
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  password      String?
  role         UserRole      @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 

}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id            String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}



model VerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String @unique 
  expires     DateTime

@@unique([email, token])

}


model PasswordResetToken{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String @unique
  expires    DateTime


  @@unique([email, token])
}




model TwoFactorToken{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String @unique
  expires    DateTime


  @@unique([email, token])
}



model TwoFactorConfirmation {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String   @db.ObjectId 
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}








//Store Modal

model Store {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String    @db.ObjectId
  billboards  Billboard[] @relation("StoreToBillboard")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Billboard {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToBillboard", fields:  [storeId], references: [id])
  label       String
  ImageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}
